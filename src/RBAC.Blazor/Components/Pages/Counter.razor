@page "/counter"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using RBAC.SQLLite.Entities
@inject AuthenticationStateProvider AuthProvider
@inject RoleManager<Role> RoleManager
@rendermode InteractiveServer
@attribute [Authorize]


<AuthorizeView>
    <Authorized>
        JESTEM ZAUTORYZOWANY  @context.User.FindFirst("FullName")?.Value
    </Authorized>
    <NotAuthorized>
        BRAK AUTORYZACJI
    </NotAuthorized>
</AuthorizeView>




<PageTitle>Counter</PageTitle>
<h3>Test Authentication State</h3>

 
<p>Username: @username</p>
<p>Roles: @string.Join(", ", roles)</p>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>
@if (permissions.Any(x=>x.Value == "EditCounter"))
{
    <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
}
else
{
    <p> Nie masz uprawnień do klikania w przycisk </p>
}

@if (permissions.Any(x => x.Value == "ViewCounter"))
{
    <p>Masz uprawnienie do wyświetlenia licznika.</p>
}
else
{
    <p>Nie masz uprawnienia do wyświetlenia licznika.</p>
}
@code {
    private int currentCount = 0;
    private string username = "";
    private List<string> roles = new();
    private List<Claim> permissions = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        username = user.Identity?.Name ?? "Anonymous";
        roles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
 
        foreach (var roleName in roles)
        {
            var role = await RoleManager.FindByNameAsync(roleName);
            if (role != null)
            {
                // Pobierz claimy przypisane do roli
                var claims = await RoleManager.GetClaimsAsync(role);
                permissions.AddRange(claims.Where(x=>x.Type == "permission").ToList());
                
            }
        }

        // Logowanie dla debugowania
        Console.WriteLine($"Roles: {string.Join(", ", roles)}");
        Console.WriteLine($"Permissions: {string.Join(", ", permissions)}");
    }

    private void IncrementCount()
    {
        Console.WriteLine("Counter incremented.");
    }

     
}